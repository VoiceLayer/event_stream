# Tests taken from
# https://github.com/awslabs/aws-c-event-stream/blob/3bc33662f9ccff4f4cbcf9509cc78c26e022fde0/tests/message_serializer_test.c
defmodule EventStreamTest do
  alias EventStream
  use ExUnit.Case
  doctest EventStream

  describe "encode!/2" do
    test "encodes data without headers" do
      expected =
        <<0x00, 0x00, 0x00, 0x1D, 0x00, 0x00, 0x00, 0x00, 0xFD, 0x52, 0x8C, 0x5A, 0x7B, 0x27,
          0x66, 0x6F, 0x6F, 0x27, 0x3A, 0x27, 0x62, 0x61, 0x72, 0x27, 0x7D, 0xC3, 0x65, 0x39,
          0x36>>

      data = "{'foo':'bar'}"
      encoded = EventStream.encode!(data)

      assert encoded == expected
    end

    test "encodes a single header" do
      expected =
        <<0x00, 0x00, 0x00, 0x3D, 0x00, 0x00, 0x00, 0x20, 0x07, 0xFD, 0x83, 0x96, 0x0C, ?c, ?o,
          ?n, ?t, ?e, ?n, ?t, ?-, ?t, ?y, ?p, ?e, 0x07, 0x00, 0x10, ?a, ?p, ?p, ?l, ?i, ?c, ?a,
          ?t, ?i, ?o, ?n, ?/, ?j, ?s, ?o, ?n, 0x7B, 0x27, 0x66, 0x6F, 0x6F, 0x27, 0x3A, 0x27,
          0x62, 0x61, 0x72, 0x27, 0x7D, 0x8D, 0x9C, 0x08, 0xB1>>

      data = "{'foo':'bar'}"

      headers = ["content-type": "application/json"]

      encoded = EventStream.encode!(data, headers)

      assert encoded == expected

      <<total_length::size(32), header_length::size(32), _rest::binary>> = encoded

      assert total_length == 61
      assert header_length == 32

      # 2 4-byte crcs, 4-byte header_length and 4 byte payload_length
      assert total_length - header_length === byte_size(data) + 16
    end
  end

  test "encodes multiple headers" do
    expected =
      <<0x00, 0x00, 0x00, 0x4A, 0x00, 0x00, 0x00, 0x2D, 0x32, 0xBE, 0xC3, 0xF4, 0x0A, ?e, ?v, ?e,
        ?n, ?t, ?-, ?t, ?y, ?p, ?e, 0x07, 0x00, 0x0A, ?A, ?u, ?d, ?i, ?o, ?E, ?v, ?e, ?n, ?t,
        0x0C, ?m, ?e, ?s, ?s, ?a, ?g, ?e, ?-, ?t, ?y, ?p, ?e, 0x07, 0x00, 0x05, ?e, ?v, ?e, ?n,
        ?t, 0x7B, 0x27, 0x66, 0x6F, 0x6F, 0x27, 0x3A, 0x27, 0x62, 0x61, 0x72, 0x27, 0x7D, 0xDA,
        0x48, 0xBD, 0xAD>>

    data = "{'foo':'bar'}"

    headers = ["event-type": "AudioEvent", "message-type": "event"]

    encoded = EventStream.encode!(data, headers)
    assert encoded == expected
  end

  test "encodes integer headers" do
    expected =
      <<0x00, 0x00, 0x00, 0x2B, 0x00, 0x00, 0x00, 0x0E, 0x34, 0x8B, 0xEC, 0x7B, 0x08, ?e, ?v, ?e,
        ?n, ?t, ?-, ?i, ?d, 0x04, 0x00, 0x00, 0xA0, 0x0C, 0x7B, 0x27, 0x66, 0x6F, 0x6F, 0x27,
        0x3A, 0x27, 0x62, 0x61, 0x72, 0x27, 0x7D, 0xD3, 0x89, 0x02, 0x85>>

    data = "{'foo':'bar'}"
    headers = ["event-id": 40972]

    encoded = EventStream.encode!(data, headers)
    assert encoded == expected
  end

  describe "decode!/1" do
    test "decodes without headers" do
      data =
        <<0x00, 0x00, 0x00, 0x1D, 0x00, 0x00, 0x00, 0x00, 0xFD, 0x52, 0x8C, 0x5A, 0x7B, 0x27,
          0x66, 0x6F, 0x6F, 0x27, 0x3A, 0x27, 0x62, 0x61, 0x72, 0x27, 0x7D, 0xC3, 0x65, 0x39,
          0x36>>

      assert EventStream.decode!(data) == {:ok, [], "{'foo':'bar'}"}
    end

    test "decodes a single header" do
      data =
        <<0x00, 0x00, 0x00, 0x3D, 0x00, 0x00, 0x00, 0x20, 0x07, 0xFD, 0x83, 0x96, 0x0C, ?c, ?o,
          ?n, ?t, ?e, ?n, ?t, ?-, ?t, ?y, ?p, ?e, 0x07, 0x00, 0x10, ?a, ?p, ?p, ?l, ?i, ?c, ?a,
          ?t, ?i, ?o, ?n, ?/, ?j, ?s, ?o, ?n, 0x7B, 0x27, 0x66, 0x6F, 0x6F, 0x27, 0x3A, 0x27,
          0x62, 0x61, 0x72, 0x27, 0x7D, 0x8D, 0x9C, 0x08, 0xB1>>

      headers = [{"content-type", "application/json"}]

      assert EventStream.decode!(data) == {:ok, headers, "{'foo':'bar'}"}
    end

    test "decodes multiple headers" do
      data =
        <<0x00, 0x00, 0x00, 0x4A, 0x00, 0x00, 0x00, 0x2D, 0x32, 0xBE, 0xC3, 0xF4, 0x0A, ?e, ?v,
          ?e, ?n, ?t, ?-, ?t, ?y, ?p, ?e, 0x07, 0x00, 0x0A, ?A, ?u, ?d, ?i, ?o, ?E, ?v, ?e, ?n,
          ?t, 0x0C, ?m, ?e, ?s, ?s, ?a, ?g, ?e, ?-, ?t, ?y, ?p, ?e, 0x07, 0x00, 0x05, ?e, ?v, ?e,
          ?n, ?t, 0x7B, 0x27, 0x66, 0x6F, 0x6F, 0x27, 0x3A, 0x27, 0x62, 0x61, 0x72, 0x27, 0x7D,
          0xDA, 0x48, 0xBD, 0xAD>>

      headers = [{"event-type", "AudioEvent"}, {"message-type", "event"}]
      assert EventStream.decode!(data) == {:ok, headers, "{'foo':'bar'}"}
    end

    test "decodes integer headers" do
      data =
        <<0x00, 0x00, 0x00, 0x2B, 0x00, 0x00, 0x00, 0x0E, 0x34, 0x8B, 0xEC, 0x7B, 0x08, ?e, ?v,
          ?e, ?n, ?t, ?-, ?i, ?d, 0x04, 0x00, 0x00, 0xA0, 0x0C, 0x7B, 0x27, 0x66, 0x6F, 0x6F,
          0x27, 0x3A, 0x27, 0x62, 0x61, 0x72, 0x27, 0x7D, 0xD3, 0x89, 0x02, 0x85>>

      headers = [{"event-id", 40972}]
      assert EventStream.decode!(data) == {:ok, headers, "{'foo':'bar'}"}
    end
  end
end
